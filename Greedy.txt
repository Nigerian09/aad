Greedy naive:

#include<bits/stdc++.h>
using namespace std;
bool con(const string& str){
    for(char c:str){
        if(!isalnum(c) && !isspace(c)){
            return true;
        }
    }
    return false;
}
void naive(string &txt,string &pat){
    int n=txt.size();
    int m=pat.size();
    if(m>n){
        cout<<"No match";
    }
    bool match;
    for(int i=0;i<=n-m;i++){
        match=true;
        for(int j=0;j<m;j++){
            if(txt[i+j]!=pat[j]){
                match=false;
                break;
            }
        }
        if(match){
            cout<<i<<endl;
        }
    }
}
int main(){
    string str,pat;
    getline(cin,str);
    getline(cin,pat);
    if(con(str) || con(pat)){
        cout<<"Invalid input";
        return 0;
    }
    naive (str,pat);
}

Rabin karp:

#include <bits/stdc++.h>
using namespace std;
#define PRIME 101
bool containsDigit(const string &s) {
    for (char c : s) {
        if (isdigit(c)) return true;
    }
    return false;
}
void rabinkarp(const string &text, const string &pattern) {
    if (containsDigit(text) || containsDigit(pattern)) {
        cout << "Invalid input" << endl;
        return;
    }
    int n = text.size(), m = pattern.size();
    if (m > n) {
        cout << "-1" << endl;
        return;
    }
    long long textHash = 0, patternHash = 0, h = 1;
    vector<int> indices;
    for (int i = 0; i < m - 1; i++)
    h = (h * PRIME);
    for (int i = 0; i < m; i++) {
        patternHash = (patternHash * PRIME + pattern[i]);
        textHash = (textHash * PRIME + text[i]);
    }
    for (int i = 0; i <= n - m; i++) {
        if (patternHash == textHash) {
            if (text.substr(i, m) == pattern) {
                indices.push_back(i);
            }
        }
        if (i < n - m) {
            textHash = (textHash - text[i] * h) * PRIME + text[i + m];
        }
    }
    if (!indices.empty()) {
        for (int idx : indices) {
            cout << idx << " ";
        }
        cout << endl;
    } else {
        cout << "-1" << endl;
    }
}
int main() {
    string text, pattern;
    getline(cin, text);
    getline(cin, pattern);
    rabinkarp(text, pattern);
    return 0;
}




Fractional knapsack:

#include<iostream>
#include<vector>
#include<algorithm>
using namespace std;
struct Artifact{
    int wei;
    int val;
};
bool cmp(struct Artifact a,struct Artifact b){
    double r1=(double)a.val/(double) a.wei;
    double r2=(double)b.val/(double) b.wei;
    return r1>r2;
}
double frac(vector<Artifact>&arr, int w){
    sort(arr.begin(),arr.end(),cmp);
    double final=0.0;
    for(int i=0;i<arr.size();i++){
        if(arr[i].wei<=w){
            w-=arr[i].wei;
            final+=arr[i].val;
        }else{
            final+=arr[i].val*((double)w/(double)arr[i].wei);
            break;
        }
    }
    return final;
}
int main(){
    int n;
    cin>>n;
    int max;
    cin>>max;
    vector<Artifact> arr(n);
    for(int i=0;i<n;i++){
        cin>>arr[i].wei;
        cin>>arr[i].val;
        
        if(arr[i].wei<=0 || arr[i].val<=0){
            cout<<"Invalid input";
            return 0;
        }
    }
    double res=frac(arr,max);
    printf("%.2f\n",res);
}


#include <bits/stdc++.h>
using namespace std;
struct Item {
    int value, weight;
    Item(int v, int w) {
        value = v;
        weight = w;
    }
};
bool compare(Item a, Item b) {
    double ratio1 = (double)a.value / a.weight;
    double ratio2 = (double)b.value / b.weight;
    return ratio1 > ratio2;
}
void fractionalKnapsack(int n, int W, vector<Item> &items) {
    sort(items.begin(), items.end(), compare);
    double maxValue = 0.0;
    int remainingCapacity = W;
    for (int i = 0; i < n; i++) {
        if (items[i].weight > W) {
            cout << "Invalid input" << endl;
            return;
        }
        if (items[i].weight <= remainingCapacity) {
            maxValue += items[i].value;
            remainingCapacity -= items[i].weight;
        } else {
            maxValue += items[i].value * ((double)remainingCapacity / items[i].weight);
            remainingCapacity = 0;
            break;
        }
    }
    cout << fixed << setprecision(2) << maxValue << endl;
    cout << remainingCapacity << endl;
}
int main() {
    int n, W;
    cin >> n >> W;
    vector<Item> items;
    for (int i = 0; i < n; i++) {
        int value, weight;
        cin >> value >> weight;
        items.push_back(Item(value, weight));
    }
    fractionalKnapsack(n, W, items);
    return 0;
}