Activity selection:

#include <bits/stdc++.h>
using namespace std;
struct Activity {
    int start;
    int end;
    int resource;
};
bool compare(Activity a, Activity b) {
    return a.end < b.end;
}
int main() {
    int n;
    cin >> n;
    
    if (n < 1 || n > 100) {
        cout << "Invalid input" << endl;
        return 0;
    }
    vector<Activity> activities;
    for (int i = 0; i < n; i++) {
        int start, end, resource;
        cin >> start >> end >> resource;
        
        if (start > end) {
            cout << "Invalid input" << endl;
            return 0;
        }
        activities.push_back({start, end, resource});
    }
    sort(activities.begin(), activities.end(), compare);
    vector<Activity> selectedActivities;
    int totalResources = 0;
    int lastEndTime = -1;
    for (const auto& activity : activities) {
        if (activity.start >= lastEndTime) {
            selectedActivities.push_back(activity);
            totalResources += activity.resource;
            lastEndTime = activity.end;
        }
    }
    for (const auto& activity : selectedActivities) {
        cout << activity.start << " " << activity.end << " " << activity.resource << endl;
    }
    cout << totalResources << endl;
    return 0;
}

#include<bits/stdc++.h>
using namespace std;
struct act{
    int start;
    int finish;
};
void select(vector<act> &aa)
{
    sort(aa.begin(),aa.end(),[](act a,act b)
    {
        return a.finish<b.finish;
    });
    int large=0;
    int c=1;
    for(int i=0;i<aa.size();i++)
    {
        if(aa[i].start>=aa[large].finish)
        {
            c++;
            large=i;
        }
    }cout<<c;
}
int main()
{
    int n;
    cin>>n;
    vector<act>arr(n);
    for(int i=0;i<n;i++)
    {
        if(!(cin>>arr[i].start>>arr[i].finish))
        {
            cout<<"Invalid input";
            return 0;
        }
    }
    select(arr);
}


#include<bits/stdc++.h>
using namespace std;
struct Event
{
    int start;
    int end;
    int penalty;
};
bool compareByEndTime(Event a,Event b)
{
    return a.end<b.end;
}
void scheduleRoyalEvents(int n,vector<Event>&events)
{
    sort(events.begin(),events.end(),compareByEndTime);
    vector<Event> selected_events;
    int current=0;
    int total=0;
    for(auto event:events)
    {
        if(event.start>event.end)
        {
            cout<<"Invalid input";
            return;
        }
        if(event.start>=current)
        {
            selected_events.push_back(event);
            current=event.end;
        }
    }
    for(auto event:selected_events)
    {
        cout<<event.start<<" "<<event.end<<" "<<event.penalty<<endl;
        total+=event.penalty;
    }
    cout<<total;
    
}
int main()
{
    int n;
    cin>>n;
    vector<Event> events(n);
    for(int i=0;i<n;i++)
    {
        cin>>events[i].start>>events[i].end>>events[i].penalty;
    }
    scheduleRoyalEvents(n,events);
}