RMQ:

Brute force:
for multiple range given in single testcase

#include <bits/stdc++.h>
using namespace std;
int RMQ(int arr[],int start,int end){
    if(start==end){
        return arr[start];
    }
    int min=arr[start];
    for(int i=start;i<=end;i++){
        if(min>arr[i]){
            min=arr[i];
        }
    }
    return min;
}
int main(){
    int n;
    cin>>n;
    if(n<0){
        cout<<"Invalid input";
        return 0;
    }
    int arr[n];
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int count;
    cin>>count;
    int start,end;
    while(count>0){
        cin>>start>>end;
        cout<<RMQ(arr,start,end)<<endl;
        count--;
    }
}


Sparse table :

#include <bits/stdc++.h>
using namespace std;

void buildSparseTable(vector<int>& arr, vector<vector<int>>& sparseTable, vector<int>& log) {
    int n = arr.size();
    for (int i = 0; i < n; i++)
    sparseTable[i][0] = arr[i];
    
    for (int j = 1; (1 << j) <= n; j++) {
        for (int i = 0; (i + (1 << j) - 1) < n; i++)
        sparseTable[i][j] = min(sparseTable[i][j - 1], sparseTable[i + (1 << (j - 1))][j - 1]);
    }
}

int query(vector<vector<int>>& sparseTable, vector<int>& log, int L, int R) {
    int j = log[R - L + 1];
    return min(sparseTable[L][j], sparseTable[R - (1 << j) + 1][j]);
}

int main() {
    int n;
    cin >> n;
    if (n < 0 || n > 15) {
        cout << "Invalid input";
        return 0;
    }
    
    vector<int> arr(n);
    for (int& x : arr) cin >> x;
    
    vector<vector<int>> sparseTable(n, vector<int>(log2(n) + 1));
    vector<int> log(n + 1);
    for (int i = 2; i <= n; i++) log[i] = log[i / 2] + 1;
    
    buildSparseTable(arr, sparseTable, log);
    
    int q;
    cin >> q;
    while (q--) {
        int L, R;
        cin >> L >> R;
        cout << "[" << L << ", " << R << "] " << query(sparseTable, log, L, R) << endl;
    }
    return 0;
}


#include <bits/stdc++.h>
using namespace std;
void buildSparseTable(vector<int>& arr, vector<vector<int>>& sparseTable, vector<int>& log) {
    int n = arr.size();
    for (int i = 0; i < n; i++)
    sparseTable[i][0] = arr[i];
    for (int j = 1; (1 << j) <= n; j++) {
        for (int i = 0; (i + (1 << j) - 1) < n; i++)
        sparseTable[i][j] = min(sparseTable[i][j - 1], sparseTable[i + (1 << (j - 1))][j - 1]);
    }
}
int query(vector<vector<int>>& sparseTable, vector<int>& log, int L, int R) {
    int j = log[R - L + 1];
    return min(sparseTable[L][j], sparseTable[R - (1 << j) + 1][j]);
}
int main() {
    int N;
    cin >> N;
    if (N < 1 || N > 1000) {
        cout << "Invalid input";
        return 0;
    }
    vector<int> arr(N);
    for (int i = 0; i < N; i++) {
        cin >> arr[i];
        if (arr[i] < 0) {
            cout << "Invalid input";
            return 0;
        }
    }
    vector<vector<int>> sparseTable(N, vector<int>(log2(N) + 1));
    vector<int> log(N + 1);
    for (int i = 2; i <= N; i++) log[i] = log[i / 2] + 1;
    
    buildSparseTable(arr, sparseTable, log);
    
    int Q;
    cin >> Q;
    while (Q--) {
        int L, R;
        cin >> L >> R;
        cout << query(sparseTable, log, L, R) << endl;
    }
    return 0;
}


Segment tree: // Portal q/a

#include <bits/stdc++.h>
    using namespace std;
    
    vector<int> segmentTree;
    vector<int> arr;
    
    void buildSegmentTree(int node, int start, int end) {
        if (start == end) {
            segmentTree[node] = arr[start];
        } else {
            int mid = (start + end) / 2;
            buildSegmentTree(2 * node + 1, start, mid);
            buildSegmentTree(2 * node + 2, mid + 1, end);
            segmentTree[node] = max(segmentTree[2 * node + 1], segmentTree[2 * node + 2]);
        }
    }
    
    void updateSegmentTree(int node, int start, int end, int idx, int val) {
        if (start == end) {
            arr[idx] = val;
            segmentTree[node] = val;
        } else {
            int mid = (start + end) / 2;
            if (idx <= mid) {
                updateSegmentTree(2 * node + 1, start, mid, idx, val);
            } else {
                updateSegmentTree(2 * node + 2, mid + 1, end, idx, val);
            }
            segmentTree[node] = max(segmentTree[2 * node + 1], segmentTree[2 * node + 2]);
        }
    }
    
    int querySegmentTree(int node, int start, int end, int L, int R) {
        if (R < start || end < L) {
            return INT_MIN;
        }
        if (L <= start && end <= R) {
            return segmentTree[node];
        }
        int mid = (start + end) / 2;
        return max(querySegmentTree(2 * node + 1, start, mid, L, R),
        querySegmentTree(2 * node + 2, mid + 1, end, L, R));
        }
        
        int main() {
            int n;
            cin >> n;
            if(n<0){
                cout<<"Invalid input";
                return 0;
            }
            arr.resize(n);
            for (int i = 0; i < n; i++) cin >> arr[i];
            
            segmentTree.resize(4 * n);
            buildSegmentTree(0, 0, n - 1);
            
            int q;
            cin >> q;
            while (q--) {
                int type;
                cin >> type;
                if (type == 1) {
                    int L, R;
                    cin >> L >> R;
                    cout << querySegmentTree(0, 0, n - 1, L, R) << endl;
                } else if (type == 2) {
                    int idx, val;
                    cin >> idx >> val;
                    updateSegmentTree(0, 0, n - 1, idx, val);
                }
            }
            return 0;
        }

#include <bits/stdc++.h>
using namespace std;

vector<int> segmentTree;
int n;

void buildSegmentTree(vector<int>& arr, int node, int start, int end) {
    if (start == end) segmentTree[node] = arr[start];
    else {
        int mid = (start + end) / 2;
        buildSegmentTree(arr, 2 * node, start, mid);
        buildSegmentTree(arr, 2 * node + 1, mid + 1, end);
        segmentTree[node] = min(segmentTree[2 * node], segmentTree[2 * node + 1]);
    }
}

int query(int node, int start, int end, int L, int R) {
    if (R < start || L > end) return INT_MAX;
    if (L <= start && end <= R) return segmentTree[node];
    int mid = (start + end) / 2;
    return min(query(2 * node, start, mid, L, R), query(2 * node + 1, mid + 1, end, L, R));
}

void update(int node, int start, int end, int idx, int val) {
    if (start == end) segmentTree[node] = val;
    else {
        int mid = (start + end) / 2;
        if (idx <= mid) update(2 * node, start, mid, idx, val);
        else update(2 * node + 1, mid + 1, end, idx, val);
        segmentTree[node] = min(segmentTree[2 * node], segmentTree[2 * node + 1]);
    }
}

int main() {
    cin >> n;
    if (n < 0) {
        cout << "Invalid input";
        return 0;
    }
    
    vector<int> arr(n);
    for (int& x : arr) cin >> x;
    
    segmentTree.resize(4 * n, INT_MAX);
    buildSegmentTree(arr, 1, 0, n - 1);
    
    int q;
    cin >> q;
    while (q--) {
        int type, a, b;
        cin >> type >> a >> b;
        if (type == 1) cout << query(1, 0, n - 1, a, b) << endl;
        else update(1, 0, n - 1, a, b);
    }
    return 0;
}

Segment tree RMQ

#include <bits/stdc++.h>
using namespace std;

void segmentTree(vector<int>& mat, vector<int>& tree, int node, int start, int end) {
    if (start == end) {
        tree[node] = mat[start]; 
        return;
    }
    int mid = (start + end) / 2;
    segmentTree(mat, tree, 2 * node + 1, start, mid);
    segmentTree(mat, tree, 2 * node + 2, mid + 1, end);
    tree[node] = min(tree[2 * node + 1], tree[2 * node + 2]);  
}
int RMQ(vector<int>& tree, int node, int start, int end, int left, int right) {
    if (right < start || left > end) return INT_MAX;  
    if (left <= start && right >= end) return tree[node];  
    int mid = (start + end) / 2;
    int p1 = RMQ(tree, 2 * node + 1, start, mid, left, right);
    int p2 = RMQ(tree, 2 * node + 2, mid + 1, end, left, right);
    return min(p1, p2);
}
int main() {
    int n;
    cin >> n;
    vector<int> mat(n);
    for (int i = 0; i < n; i++) {
        cin >> mat[i];
    }
    vector<int> tree(4 * n);
    segmentTree(mat, tree, 0, 0, n - 1);
    int left, right;
    cin >> left >> right
    int minValue = RMQ(tree, 0, 0, n - 1, left, right);
    cout << "Minimum value in range [" << left << ", " << right << "] = " << minValue << endl;
    return 0;
}
